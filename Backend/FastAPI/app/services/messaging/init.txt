Messaging Service Module

This module provides comprehensive messaging functionality including:
- User messaging with access control
- Company-wide messaging
- Warning and disciplinary action systems
- Message statistics and cleanup utilities

INTEGRATION OVERVIEW:
All components work together through the main MessagingService class:

1. MessagingService - Main orchestrator that coordinates all functionality
2. MessageStorage - Handles encrypted persistence of messages
3. MessageAccessControl - Manages permissions and access control
4. DisciplinaryActionManager - Handles warnings and disciplinary actions
5. MessageStatistics - Provides analytics and reporting
6. MessageCleanup - Manages message maintenance and cleanup

QUICK START USAGE:
from app.services.messaging import messaging_service

# Basic messaging
success = messaging_service.add_user_message(
    user_uuid="user-123",
    message="Hello there!",
    author_uuid="admin-456",
    message_type="info"
)

# Get messages (with access control)
messages = messaging_service.get_user_messages(
    user_uuid="user-123",
    requesting_user_uuid="admin-456", 
    requesting_user_privileges=["admin"]
)

# Send company-wide message
messaging_service.send_message_to_company_users(
    company_id="company-789",
    message="Important announcement",
    author_uuid="admin-456",
    message_type="general"
)

DISCIPLINARY ACTIONS:
# Send warning to subordinates (managers, admins, owners only)
result = messaging_service.send_warning_to_subordinates(
    sender_uuid="manager-123",
    message="Please review safety protocols",
    target_user_uuids=None  # None = all subordinates
)
# Returns: {"success": bool, "sent_count": int, "successful_users": [...], ...}

# Send disciplinary action (admins, owners only)
result = messaging_service.send_disciplinary_action(
    sender_uuid="admin-123",
    target_user_uuid="user-456", 
    action_type="formal_warning",
    message="Violation of company policy",
    severity="medium"  # low, medium, high, critical
)
# Returns: {"success": bool, "action_type": str, "target_user": {...}, ...}

MESSAGE STATISTICS:
# Get user statistics
stats = messaging_service.get_user_statistics("user-123")
# Returns: {"total_messages": int, "unread_messages": int, "message_types": {...}, "recent_activity": [...]}

# Get company statistics  
stats = messaging_service.get_company_statistics("company-789")
# Returns: {"total_users": int, "users_with_messages": int, "total_messages": int, "user_breakdown": [...]}

# Get system-wide statistics
stats = messaging_service.get_system_wide_statistics()
# Returns: {"total_users_with_messages": int, "activity_summary": {...}, "companies": {...}, ...}

MESSAGE CLEANUP:
# Clean old messages (90 days default)
count = messaging_service.cleanup_old_messages(days_old=90, user_uuid=None)
# Returns: int (number of messages cleaned)

# Clean messages by type
count = messaging_service.cleanup_messages_by_type("warning", user_uuid="user-123")
# Returns: int (number of messages cleaned)

# Optimize storage (remove duplicates, organize)
results = messaging_service.optimize_message_storage()
# Returns: {"duplicates_removed": int, "users_processed": int, "empty_users_removed": int}

ACCESS CONTROL NOTES:
- Users can only see/delete their own messages
- Admins and owners can see/delete any messages
- Managers can send warnings to subordinates
- Only admins and owners can send disciplinary actions
- Privilege hierarchy: owner > admin > manager > dispatcher > engineer > fuel_manager > fleet_officer > analyst > viewer

MESSAGE STRUCTURE:
Each message contains:
{
    "id": "msg_1234567890_0",           # Unique message ID
    "content": "Message text",          # Message content
    "author_uuid": "user-456",          # Who sent the message
    "message_type": "general",          # Type: general, warning, disciplinary, info
    "timestamp": 1234567890.123,       # Unix timestamp
    "created_at": "2024-01-15T10:30:00", # ISO datetime string
    "read": false                       # Read status
}

ERROR HANDLING:
All methods include comprehensive error handling and logging.
Most methods return False/empty results on error rather than raising exceptions.
Check logs for detailed error information.

SECURITY FEATURES:
- All messages are encrypted at rest
- Access control prevents unauthorized access
- Privilege-based permissions for disciplinary actions
- Company isolation (users can only interact